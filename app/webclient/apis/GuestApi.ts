/* tslint:disable */
/* eslint-disable */
/**
 * Home Unite Us
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Guest,
    GuestFromJSON,
    GuestToJSON,
    ModelApiResponse,
    ModelApiResponseFromJSON,
    ModelApiResponseToJSON,
} from '../models';

export interface DeleteGuestRequest {
    guestId: number;
}

export interface ListGuestsRequest {
    limit?: number;
}

export interface UpdateGuestRequest {
    guest: Guest;
}

export interface UploadGuestImageRequest {
    guestId: string;
    additionalMetadata?: string;
    body?: Blob;
}

/**
 * 
 */
export class GuestApi extends runtime.BaseAPI {

    /**
     * Create a guest
     */
    async createGuestRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/guests`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a guest
     */
    async createGuest(initOverrides?: RequestInit): Promise<void> {
        await this.createGuestRaw(initOverrides);
    }

    /**
     * Delete a guest
     * Deletes a guest
     */
    async deleteGuestRaw(requestParameters: DeleteGuestRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.guestId === null || requestParameters.guestId === undefined) {
            throw new runtime.RequiredError('guestId','Required parameter requestParameters.guestId was null or undefined when calling deleteGuest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/guests`.replace(`{${"guestId"}}`, encodeURIComponent(String(requestParameters.guestId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a guest
     * Deletes a guest
     */
    async deleteGuest(requestParameters: DeleteGuestRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deleteGuestRaw(requestParameters, initOverrides);
    }

    /**
     * See the full list of guests
     * List all guests
     */
    async listGuestsRaw(requestParameters: ListGuestsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Guest>>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/guests`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GuestFromJSON));
    }

    /**
     * See the full list of guests
     * List all guests
     */
    async listGuests(requestParameters: ListGuestsRequest, initOverrides?: RequestInit): Promise<Array<Guest>> {
        const response = await this.listGuestsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a guest
     * Update a guest
     */
    async updateGuestRaw(requestParameters: UpdateGuestRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Guest>> {
        if (requestParameters.guest === null || requestParameters.guest === undefined) {
            throw new runtime.RequiredError('guest','Required parameter requestParameters.guest was null or undefined when calling updateGuest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/guests`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GuestToJSON(requestParameters.guest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GuestFromJSON(jsonValue));
    }

    /**
     * Update a guest
     * Update a guest
     */
    async updateGuest(requestParameters: UpdateGuestRequest, initOverrides?: RequestInit): Promise<Guest> {
        const response = await this.updateGuestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * uploads an image
     */
    async uploadGuestImageRaw(requestParameters: UploadGuestImageRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ModelApiResponse>> {
        if (requestParameters.guestId === null || requestParameters.guestId === undefined) {
            throw new runtime.RequiredError('guestId','Required parameter requestParameters.guestId was null or undefined when calling uploadGuestImage.');
        }

        const queryParameters: any = {};

        if (requestParameters.additionalMetadata !== undefined) {
            queryParameters['additionalMetadata'] = requestParameters.additionalMetadata;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/octet-stream';

        const response = await this.request({
            path: `/guests/{guestId}/uploadImage`.replace(`{${"guestId"}}`, encodeURIComponent(String(requestParameters.guestId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelApiResponseFromJSON(jsonValue));
    }

    /**
     * uploads an image
     */
    async uploadGuestImage(requestParameters: UploadGuestImageRequest, initOverrides?: RequestInit): Promise<ModelApiResponse> {
        const response = await this.uploadGuestImageRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
