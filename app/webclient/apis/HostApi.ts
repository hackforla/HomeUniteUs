/* tslint:disable */
/* eslint-disable */
/**
 * Home Unite Us
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Host,
    HostFromJSON,
    HostToJSON,
    ModelApiResponse,
    ModelApiResponseFromJSON,
    ModelApiResponseToJSON,
} from '../models';

export interface DeleteHostRequest {
    hostId: number;
}

export interface ListHostsRequest {
    limit?: number;
}

export interface UpdateHostRequest {
    host: Host;
}

export interface UploadHostImageRequest {
    hostId: string;
    additionalMetadata?: string;
    body?: Blob;
}

/**
 * 
 */
export class HostApi extends runtime.BaseAPI {

    /**
     * Create a host
     */
    async createHostRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/hosts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a host
     */
    async createHost(initOverrides?: RequestInit): Promise<void> {
        await this.createHostRaw(initOverrides);
    }

    /**
     * Delete a host
     * Deletes a host
     */
    async deleteHostRaw(requestParameters: DeleteHostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.hostId === null || requestParameters.hostId === undefined) {
            throw new runtime.RequiredError('hostId','Required parameter requestParameters.hostId was null or undefined when calling deleteHost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/hosts`.replace(`{${"hostId"}}`, encodeURIComponent(String(requestParameters.hostId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a host
     * Deletes a host
     */
    async deleteHost(requestParameters: DeleteHostRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deleteHostRaw(requestParameters, initOverrides);
    }

    /**
     * See the full list of hosts
     * List all hosts
     */
    async listHostsRaw(requestParameters: ListHostsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Host>>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/hosts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(HostFromJSON));
    }

    /**
     * See the full list of hosts
     * List all hosts
     */
    async listHosts(requestParameters: ListHostsRequest, initOverrides?: RequestInit): Promise<Array<Host>> {
        const response = await this.listHostsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a host
     * Update a host
     */
    async updateHostRaw(requestParameters: UpdateHostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Host>> {
        if (requestParameters.host === null || requestParameters.host === undefined) {
            throw new runtime.RequiredError('host','Required parameter requestParameters.host was null or undefined when calling updateHost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/hosts`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: HostToJSON(requestParameters.host),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HostFromJSON(jsonValue));
    }

    /**
     * Update a host
     * Update a host
     */
    async updateHost(requestParameters: UpdateHostRequest, initOverrides?: RequestInit): Promise<Host> {
        const response = await this.updateHostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * uploads an image
     */
    async uploadHostImageRaw(requestParameters: UploadHostImageRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ModelApiResponse>> {
        if (requestParameters.hostId === null || requestParameters.hostId === undefined) {
            throw new runtime.RequiredError('hostId','Required parameter requestParameters.hostId was null or undefined when calling uploadHostImage.');
        }

        const queryParameters: any = {};

        if (requestParameters.additionalMetadata !== undefined) {
            queryParameters['additionalMetadata'] = requestParameters.additionalMetadata;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/octet-stream';

        const response = await this.request({
            path: `/hosts/{hostId}/uploadImage`.replace(`{${"hostId"}}`, encodeURIComponent(String(requestParameters.hostId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelApiResponseFromJSON(jsonValue));
    }

    /**
     * uploads an image
     */
    async uploadHostImage(requestParameters: UploadHostImageRequest, initOverrides?: RequestInit): Promise<ModelApiResponse> {
        const response = await this.uploadHostImageRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
