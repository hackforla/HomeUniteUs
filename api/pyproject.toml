[build-system]
# This pyproject.toml uses the setuptools tool as its package manager.
requires = ["setuptools>=61.0", "setuptools-scm"]
build-backend = "setuptools.build_meta"

[project]
name = "openapi_server"
# The version of this project is determined dynamically using the
# setuptools-scm tool. Its configuration is defined in the
# [tool.setuptools_scm] table.
dynamic = ["version"]
authors = [
    { name="Home Unite Us", email=" homeuniteus@hackforla.org" },
]
description = "Web API for Home Unite Us"
readme = "README.md"
requires-python = ">=3.10"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",
    "Operating System :: OS Independent",
]
dependencies = [
    # alembic does not use SemVer. Changes in the middle number represents a
    # "Significant Minor Release" that might be non-backward compatible.
    # https://alembic.sqlalchemy.org/en/latest/front.html#versioning-scheme
    "alembic==1.11.1",

    # boto3 is used for connecting to AWS resources
    "boto3==1.22.10",

    # connexion is the framework that this API is built on top of
    # The extra dependency swagger-ui causes the swagger UI to be available
    # at /api/ui.
    "connexion [swagger-ui]==2.14.2",

    # psycopg2 allows alembic to communicate with PostgreSQL
    "psycopg2-binary==2.9.6",

    # python-dotenv allows the API to pull in external configuration from a .env file
    "python-dotenv==1.0.0",

    # The version of connexion that is in use does not parse multi-file OpenAPI
    # definitions like the ones found in the openapi directory. However, with the
    # help of the prance and openapi-spec-validator libraries, this code can pre-parse
    # the multi-file OpenAPI definitions into a flat structure that is passed to
    # the connexion framework.
    "prance",
    "openapi-spec-validator",
]

[project.urls]
"Homepage" = "https://github.com/hackforla/HomeUniteUs"
"Bug Tracker" = "https://github.com/hackforla/HomeUniteUs/issues"

[project.optional-dependencies]
# This defines the "dev" extra dependency group. It installs dependencies
# necessary for developers of this code.
dev = [
  # tox is used as this code's test runner. It has its own configuration file
  # named `tox.ini`.
  "tox==4.6.4",
]

# This defines the "prod" extra dependency group. It installs dependencies
# necessary for running this API in production.
prod = [
  # This API requires a WSGI server to run in production. gunicorn is a WSGI
  # HTTP server that is used as an intermediary between a HTTP proxy and this
  # application. It can be installed as an extra dependency in a production-like
  # environment.
  "gunicorn==21.2.0",
]

[tool.setuptools.packages.find]
# The find packages tool looks for files necessary for this API to run correctly.
# By default, all of the Python files are included.
# The where parameter tells the tool where to start looking for files.
# In this case, all of the files in the directory this file is in will be searched.
where = ["."]

[tool.setuptools.package-data]
# The OpenAPI definitions need to be included in the build.
# The definitions are bundled together during startup and given to
# connexion to implement and route traffic to the controllers in this
# repository.
"*" = ["openapi_server/*.yaml"]

[tool.setuptools_scm]
# The setuptools_scm tool uses this project's git repository to version the build.
# The git repository is located in the parent directory relative to this file.
root = ".."