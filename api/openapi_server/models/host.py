# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Host(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, tag=None, photo_urls=None):  # noqa: E501
        """Host - a model defined in OpenAPI

        :param id: The id of this Host.  # noqa: E501
        :type id: int
        :param name: The name of this Host.  # noqa: E501
        :type name: str
        :param tag: The tag of this Host.  # noqa: E501
        :type tag: str
        :param photo_urls: The photo_urls of this Host.  # noqa: E501
        :type photo_urls: List[str]
        """
        self.openapi_types = {
            'id': int,
            'name': str,
            'tag': str,
            'photo_urls': List[str]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'tag': 'tag',
            'photo_urls': 'photoUrls'
        }

        self._id = id
        self._name = name
        self._tag = tag
        self._photo_urls = photo_urls

    @classmethod
    def from_dict(cls, dikt) -> 'Host':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Host of this Host.  # noqa: E501
        :rtype: Host
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Host.


        :return: The id of this Host.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Host.


        :param id: The id of this Host.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Host.


        :return: The name of this Host.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Host.


        :param name: The name of this Host.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def tag(self):
        """Gets the tag of this Host.


        :return: The tag of this Host.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this Host.


        :param tag: The tag of this Host.
        :type tag: str
        """

        self._tag = tag

    @property
    def photo_urls(self):
        """Gets the photo_urls of this Host.


        :return: The photo_urls of this Host.
        :rtype: List[str]
        """
        return self._photo_urls

    @photo_urls.setter
    def photo_urls(self, photo_urls):
        """Sets the photo_urls of this Host.


        :param photo_urls: The photo_urls of this Host.
        :type photo_urls: List[str]
        """

        self._photo_urls = photo_urls
