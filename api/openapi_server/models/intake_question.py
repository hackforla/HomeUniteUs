# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.applicant_type import ApplicantType
from openapi_server.models.intake_question_set import IntakeQuestionSet
from openapi_server.models.intake_question_type import IntakeQuestionType
from openapi_server import util

from openapi_server.models.applicant_type import ApplicantType  # noqa: E501
from openapi_server.models.intake_question_set import IntakeQuestionSet  # noqa: E501
from openapi_server.models.intake_question_type import IntakeQuestionType  # noqa: E501

class IntakeQuestion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, applicant_type=None, question_text=None, intake_question_type=None, intake_question_set=None):  # noqa: E501
        """IntakeQuestion - a model defined in OpenAPI

        :param applicant_type: The applicant_type of this IntakeQuestion.  # noqa: E501
        :type applicant_type: ApplicantType
        :param question_text: The question_text of this IntakeQuestion.  # noqa: E501
        :type question_text: str
        :param intake_question_type: The intake_question_type of this IntakeQuestion.  # noqa: E501
        :type intake_question_type: IntakeQuestionType
        :param intake_question_set: The intake_question_set of this IntakeQuestion.  # noqa: E501
        :type intake_question_set: IntakeQuestionSet
        """
        self.openapi_types = {
            'applicant_type': ApplicantType,
            'question_text': str,
            'intake_question_type': IntakeQuestionType,
            'intake_question_set': IntakeQuestionSet
        }

        self.attribute_map = {
            'applicant_type': 'applicant_type',
            'question_text': 'question_text',
            'intake_question_type': 'intake_question_type',
            'intake_question_set': 'intake_question_set'
        }

        self._applicant_type = applicant_type
        self._question_text = question_text
        self._intake_question_type = intake_question_type
        self._intake_question_set = intake_question_set

    @classmethod
    def from_dict(cls, dikt) -> 'IntakeQuestion':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The IntakeQuestion of this IntakeQuestion.  # noqa: E501
        :rtype: IntakeQuestion
        """
        return util.deserialize_model(dikt, cls)

    @property
    def applicant_type(self):
        """Gets the applicant_type of this IntakeQuestion.


        :return: The applicant_type of this IntakeQuestion.
        :rtype: ApplicantType
        """
        return self._applicant_type

    @applicant_type.setter
    def applicant_type(self, applicant_type):
        """Sets the applicant_type of this IntakeQuestion.


        :param applicant_type: The applicant_type of this IntakeQuestion.
        :type applicant_type: ApplicantType
        """
        if applicant_type is None:
            raise ValueError("Invalid value for `applicant_type`, must not be `None`")  # noqa: E501

        self._applicant_type = applicant_type

    @property
    def question_text(self):
        """Gets the question_text of this IntakeQuestion.


        :return: The question_text of this IntakeQuestion.
        :rtype: str
        """
        return self._question_text

    @question_text.setter
    def question_text(self, question_text):
        """Sets the question_text of this IntakeQuestion.


        :param question_text: The question_text of this IntakeQuestion.
        :type question_text: str
        """
        if question_text is None:
            raise ValueError("Invalid value for `question_text`, must not be `None`")  # noqa: E501

        self._question_text = question_text

    @property
    def intake_question_type(self):
        """Gets the intake_question_type of this IntakeQuestion.


        :return: The intake_question_type of this IntakeQuestion.
        :rtype: IntakeQuestionType
        """
        return self._intake_question_type

    @intake_question_type.setter
    def intake_question_type(self, intake_question_type):
        """Sets the intake_question_type of this IntakeQuestion.


        :param intake_question_type: The intake_question_type of this IntakeQuestion.
        :type intake_question_type: IntakeQuestionType
        """
        if intake_question_type is None:
            raise ValueError("Invalid value for `intake_question_type`, must not be `None`")  # noqa: E501

        self._intake_question_type = intake_question_type

    @property
    def intake_question_set(self):
        """Gets the intake_question_set of this IntakeQuestion.


        :return: The intake_question_set of this IntakeQuestion.
        :rtype: IntakeQuestionSet
        """
        return self._intake_question_set

    @intake_question_set.setter
    def intake_question_set(self, intake_question_set):
        """Sets the intake_question_set of this IntakeQuestion.


        :param intake_question_set: The intake_question_set of this IntakeQuestion.
        :type intake_question_set: IntakeQuestionSet
        """
        if intake_question_set is None:
            raise ValueError("Invalid value for `intake_question_set`, must not be `None`")  # noqa: E501

        self._intake_question_set = intake_question_set
