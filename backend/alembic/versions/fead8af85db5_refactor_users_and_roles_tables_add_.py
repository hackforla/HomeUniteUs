"""Refactor users and roles tables. Add event store.

Revision ID: fead8af85db5
Revises: a1a53aaf81d3
Create Date: 2024-11-04 19:44:58.247093

"""
from alembic import op
import sqlalchemy as sa
import app


# revision identifiers, used by Alembic.
revision = 'fead8af85db5'
down_revision = 'a1a53aaf81d3'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('dashboard_users_view',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('userName', sa.String(), nullable=False),
    sa.Column('role', sa.String(), nullable=False),
    sa.Column('caseStatus', sa.String(), nullable=False),
    sa.Column('coordinatorName', sa.String(), nullable=False),
    sa.Column('lastUpdated', sa.DateTime(), nullable=False),
    sa.Column('notes', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id', 'email')
    )
    op.create_table('event_streams',
    sa.Column('stream_id', sa.String(length=36), nullable=False),
    sa.Column('stream_version', sa.Integer(), nullable=False),
    sa.Column('event_data', sa.JSON(), nullable=False),
    sa.Column('meta_data', sa.JSON(), nullable=True),
    sa.Column('stored_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('stream_id', 'stream_version')
    )
    op.create_table('roles',
    sa.Column('role', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('role')
    )
    op.create_table('users',
    sa.Column('user_id', app.modules.access.models.UserIdType(), nullable=False),
    sa.Column('email', app.modules.access.models.EmailAddressType(), nullable=False),
    sa.Column('first_name', sa.String(), nullable=False),
    sa.Column('middle_name', sa.String(), nullable=True),
    sa.Column('last_name', sa.String(), nullable=False),
    sa.Column('role', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['role'], ['roles.role'], ),
    sa.PrimaryKeyConstraint('user_id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.drop_constraint('user_roleId_fkey', 'user', 'foreignkey')
    op.drop_constraint('responses_user_id_fkey', 'responses', 'foreignkey')
    op.drop_constraint('unmatched_guest_case_status_id_fkey', 'unmatched_guest_case', 'foreignkey')
    op.drop_constraint('unmatched_guest_case_guest_id_fkey', 'unmatched_guest_case', 'foreignkey')
    op.drop_constraint('unmatched_guest_case_coordinator_id_fkey', 'unmatched_guest_case', 'foreignkey')
    op.drop_index('ix_role_id', table_name='role')
    op.drop_table('role')
    op.drop_table('unmatched_guest_case_status')
    op.drop_index('ix_user_id', table_name='user')
    op.drop_table('user')
    op.drop_table('unmatched_guest_case')
    op.alter_column('responses', 'user_id', new_column_name='old_user_id')
    op.add_column('responses',
                  sa.Column('user_id', app.modules.access.models.UserIdType(), nullable=False))
    op.drop_column('responses', 'old_user_id')
    op.create_foreign_key(None, 'responses', 'users', ['user_id'], ['user_id'])

    op.execute(
        "INSERT INTO roles (role) VALUES ('admin') ON CONFLICT DO NOTHING")
    op.execute(
        "INSERT INTO roles (role) VALUES ('guest') ON CONFLICT DO NOTHING")
    op.execute(
        "INSERT INTO roles (role) VALUES ('coordinator') ON CONFLICT DO NOTHING"
    )
    op.execute(
        "INSERT INTO roles (role) VALUES ('host') ON CONFLICT DO NOTHING")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'responses', type_='foreignkey')
    op.create_foreign_key('responses_user_id_fkey', 'responses', 'user', ['user_id'], ['id'])
    op.alter_column('responses', 'user_id',
               existing_type=app.modules.access.models.UserIdType(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.create_table('unmatched_guest_case',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('guest_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('coordinator_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('status_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['coordinator_id'], ['user.id'], name='unmatched_guest_case_coordinator_id_fkey'),
    sa.ForeignKeyConstraint(['guest_id'], ['user.id'], name='unmatched_guest_case_guest_id_fkey'),
    sa.ForeignKeyConstraint(['status_id'], ['unmatched_guest_case_status.id'], name='unmatched_guest_case_status_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='unmatched_guest_case_pkey')
    )
    op.create_table('user',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('firstName', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('middleName', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('lastName', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('roleId', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['roleId'], ['role.id'], name='user_roleId_fkey'),
    sa.PrimaryKeyConstraint('id', name='user_pkey'),
    sa.UniqueConstraint('email', name='user_email_key')
    )
    op.create_index('ix_user_id', 'user', ['id'], unique=False)
    op.create_table('unmatched_guest_case_status',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('status_text', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='unmatched_guest_case_status_pkey'),
    sa.UniqueConstraint('status_text', name='unmatched_guest_case_status_status_text_key')
    )
    op.create_table('role',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='role_pkey'),
    sa.UniqueConstraint('type', name='role_type_key')
    )
    op.create_index('ix_role_id', 'role', ['id'], unique=False)
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_table('roles')
    op.drop_table('event_streams')
    op.drop_table('dashboard_users_view')
    # ### end Alembic commands ###
